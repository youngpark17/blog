server.port=8081

spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/blog?serverTimezone=UTC&characterEncoding=UTF-8
spring.datasource.username=admin
spring.datasource.password=1234
### JPA
#spring.jpa.database-platform
#JPA 데이터베이스 플랫폼을 지정합니다.
#예제에서는 MySQL InnoDB를 사용하도록 설정했습니다.
spring.jpa.open-in-view=false
#OSIV(Open Session In View)는 웹 요청이 완료될 때까지 동일한 EntityManager를 갖도록 해줍니다.
#스프링부트에서 OSIV가 기본값으로 true인데, 성능과 확장상 면에서 안좋다고 해서 false로 설정을 껏습니다. ( 참고 )
spring.jpa.show-sql=true
#콘솔에 JPA 실행 쿼리를 출력합니다.
spring.jpa.hibernate.ddl_auto=update
#데이터베이스 초기화 전략을 설정합니다.
#none
#아무것도 실행하지 않습니다.
#create
#SessionFactory가 시작될 때 기존테이블을 삭제 후 다시 생성합니다.
#create-drop
#create와 같으나 SessionFactory가 종료될 때 drop을 실행합니다.
#update
#변경된 스키마만 반영합니다.
#validate
#엔티티와 테이블이 정상적으로 매핑되었는지만 확인합니다.
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
logging.level.org.hibernate.type.descriptor.sql=DEBUG
#SQL에서 물음표로 표기된 부분( bind parameter )을 로그로 출력해서 확인할 수 있습니다.